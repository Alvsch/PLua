name: Build PLua Plugin

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Cancel in-progress runs when a new workflow with the same ref is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-commit:
    name: Check Commit Message
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.skip-check.outputs.skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for skip CI keywords
        id: skip-check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -qiE '\[(skip|no) ci\]'; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping build due to [skip ci] or [no ci] in commit message"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.target }}
    needs: check-commit
    if: needs.check-commit.outputs.skip != 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libplua_x86_64_linux.so
            file_extension: so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: libplua_aarch64_linux.so
            file_extension: so
            cross: true
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact_name: plua_x86_64_windows.dll
            file_extension: dll

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (ARM64)
        if: matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' > .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename build artifact
        run: |
          mkdir -p artifacts
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/${{ matrix.target }}/release/plua.${{ matrix.file_extension }} artifacts/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/libplua.${{ matrix.file_extension }} artifacts/${{ matrix.artifact_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}
          if-no-files-found: error

  collect-artifacts:
    name: Collect Artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create combined artifact
        run: |
          mkdir -p combined-artifacts
          find artifacts -type f -exec cp {} combined-artifacts/ \;
          ls -la combined-artifacts/

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v3
        with:
          name: plua-all-platforms
          path: combined-artifacts/*
          if-no-files-found: error